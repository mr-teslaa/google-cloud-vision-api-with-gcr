-------------------------------------------------
FILE: run.py
-------------------------------------------------
from app import create_app

app = create_app()

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=int(app.config["PORT"]))



-------------------------------------------------
FILE: app\__init__.py
-------------------------------------------------
from flask import Flask
from flask_restx import Api
from .config import Config
from .routes import ns as ocr_namespace
from .utils.error_handler import register_error_handlers


def create_app():
    # Validate Google credentials at startup
    Config.validate_credentials()

    app = Flask(__name__)
    app.config.from_object(Config)

    # Create API with docs
    api = Api(
        app,
        version="1.0",
        title="FLEXBONE AI - CloudVision OCR API Assignment",
        description="Extract text from JPEG images using Google Cloud Vision API",
        doc="/docs",  # Swagger UI
    )

    # Register OCR namespace
    api.add_namespace(ocr_namespace, path="/api")

    # Register error handlers
    register_error_handlers(app)

    return app



-------------------------------------------------
FILE: app\config.py
-------------------------------------------------
import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())


class Config:
    PORT = os.getenv("PORT", 5000)
    MAX_CONTENT_LENGTH = 10 * 1024 * 1024  # 10 MB
    ALLOWED_EXTENSIONS = {"jpg", "jpeg"}
    GOOGLE_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "service.json")

    @classmethod
    def validate_credentials(cls):
        """Validate that the Google credentials file exists and is readable."""
        creds_path = cls.GOOGLE_CREDENTIALS

        if not creds_path:
            raise RuntimeError(
                "❌ GOOGLE_APPLICATION_CREDENTIALS not set in environment or .env file"
            )

        if not os.path.isfile(creds_path):
            raise RuntimeError(
                f"❌ Google credentials file not found at '{creds_path}'. "
                "Check your .env file or default path."
            )

        if not creds_path.endswith(".json"):
            raise RuntimeError(
                f"❌ Invalid credentials file: {creds_path}. Must be a .json file."
            )

        # If valid, export for Google SDK
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = creds_path


-------------------------------------------------
FILE: app\routes.py
-------------------------------------------------
from flask import request
from flask_restx import Namespace, Resource, reqparse
from .services.ocr_service import OCRService
from .utils.file_utils import allowed_file, get_secure_filename
from .schemas.input import register_input_schemas
from .schemas.response import register_output_schemas, success_response, error_response

# Create namespace
ns = Namespace("OCR", description="OCR operations")

# Register models with namespace
OCRInputSchema = register_input_schemas(ns)
OCROutputSchema = register_output_schemas(ns)


# Parser for multipart/form-data
upload_parser = reqparse.RequestParser()
upload_parser.add_argument(
    "image",
    location="files",
    type="FileStorage",
    required=True,
    help="JPEG image file to extract text from",
)


@ns.route("/extract-text")
class ExtractText(Resource):
    @ns.expect(upload_parser)
    @ns.response(200, "Success", OCROutputSchema)
    @ns.response(400, "Bad Request")
    @ns.response(415, "Unsupported Media Type")
    @ns.response(500, "Internal Server Error")
    def post(self):
        """Extract text from uploaded JPG image"""
        if not request.content_type.startswith("multipart/form-data"):
            return error_response(
                "Invalid request type. Must be multipart/form-data", 415
            )

        if "image" not in request.files:
            return error_response("No image file provided in the request", 400)

        file = request.files["image"]

        if file.filename == "":
            return error_response("No file selected", 400)

        if not allowed_file(file.filename):
            return error_response(
                "Invalid file type. Only JPG/JPEG files are allowed.", 400
            )

        if file.mimetype not in ["image/jpeg", "image/jpg"]:
            return error_response(
                f"Invalid MIME type: {file.mimetype}. Only JPEG images are allowed.",
                400,
            )

        content = file.read()
        if not content or len(content) == 0:
            return error_response("Uploaded file is empty or unreadable.", 400)

        filename = get_secure_filename(file.filename)

        try:
            ocr = OCRService()
            result = ocr.extract_text(content)
            return success_response(result)
        except ValueError as ve:
            return error_response(str(ve), 400)
        except RuntimeError as re:
            return error_response(str(re), 500)
        except Exception as e:
            return error_response(f"Unexpected error: {str(e)}", 500)


@ns.route("/health")
class Health(Resource):
    def get(self):
        """Health check endpoint"""
        return {"status": "healthy"}, 200


-------------------------------------------------
FILE: app\schemas\response.py
-------------------------------------------------
import json
from flask import Response
from flask_restx import fields


def register_output_schemas(api):
    OCROutputSchema = api.model(
        "OCROutput",
        {
            "success": fields.Boolean(required=True, description="Request status"),
            "text": fields.String(description="Extracted text from image"),
            "confidence": fields.Float(description="Average OCR confidence"),
            "processing_time_ms": fields.Integer(description="Processing time in ms"),
        },
    )
    return OCROutputSchema


def success_response(data: dict, status: int = 200) -> Response:
    return Response(
        json.dumps({"success": True, **data}, ensure_ascii=False),
        status=status,
        mimetype="application/json; charset=utf-8",
    )


def error_response(message: str, status: int) -> Response:
    return Response(
        json.dumps({"success": False, "error": message}, ensure_ascii=False),
        status=status,
        mimetype="application/json; charset=utf-8",
    )




-------------------------------------------------
FILE: app\schemas\input.py
-------------------------------------------------
from flask_restx import fields


def register_input_schemas(api):
    OCRInputSchema = api.model(
        "OCRInput",
        {
            "image": fields.String(
                description="JPEG image file (multipart/form-data)", required=True
            )
        },
    )
    return OCRInputSchema



-------------------------------------------------
FILE: app\services\ocr_service.py
-------------------------------------------------



-------------------------------------------------
FILE: app\utils\error_handler.py
-------------------------------------------------



-------------------------------------------------
FILE: app\utils\file_utils.py
-------------------------------------------------

